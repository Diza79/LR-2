void initializeGameBoard(GameBoard *board) {
    board->width = BOARD_WIDTH; // Установка размеров поля из констант BOARD_WIDTH и BOARD_HEIGHT
    board->height = BOARD_HEIGHT;
    for (int i = 0; i < BOARD_HEIGHT; i++) {
        for (int j = 0; j < BOARD_WIDTH; j++) {
            board->board[i][j].type = EMPTY;
            board->board[i][j].occupied = 0;
            board->board[i][j].x = j; // Установка координат для клетки
            board->board[i][j].y = i;
        }
    }
} // Инициализация пустого поля 

void initializePlayer(Player *player, const char *name) {
    strcpy(player->name, name);
    player->score = 0;
    player->level = 1;
} // Регистрация нового игрока

void printGameBoard(const GameBoard *board) {
    for (int i = 0; i < board->height; i++) {
        for (int j = 0; j < board->width; j++) {
            if (board->board[i][j].occupied) { // Занята ли клетка
                printf("%d ", board->board[i][j].type); // Если занята, то вывести число цвета
            } else {
                printf(". "); // Если пустая, то точка
            }
        }
        printf("\n");
    }
}

int checkCombination(GameBoard *board, Combination *combination) {
    // Проверка на наличие комбинации в игровом поле
    // Возвращает 1, если есть, иначе 0
    return 0; // Заглушка
}

void updateScore(ScoreCounter *scoreCounter, int points) {
    scoreCounter->currentScore += points;
    scoreCounter->totalScore += points;
} // Зачисление очков игроку

void initializeGame(Game *game, const char *playerName) {
    initializeGameBoard(&game->gameBoard);
    initializePlayer(&game->player, playerName);
    game->gameStatus = 0; // Игра идет
}

void playGame(Game *game) {
    // Логика игры
    // Здесь можно добавить взаимодействие с игроком, например, выбор клеток игроком
}

int main() {
    Game game;
    GameSettings settings = {MAX_LEVELS, BOARD_WIDTH, BOARD_HEIGHT, 1};
    ScoreCounter scoreCounter = {0, 0}; // Обнуление очков

    // Инициализация игры
    initializeGame(&game, "Игрок 1");

    // Демонстрация работы с игровым полем
    printGameBoard(&game.gameBoard);

    // Пример обновления счета
    updateScore(&scoreCounter, 10);
    printf("Текущий счет: %d\n", scoreCounter.currentScore);

    // Пример использования динамической переменной
    GameBoard *dynamicBoard = (GameBoard *)malloc(sizeof(GameBoard));
    initializeGameBoard(dynamicBoard);
    printGameBoard(dynamicBoard);

    // Освобождение динамической памяти
    free(dynamicBoard);

    return 0;
}
